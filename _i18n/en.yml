global:
  tagline: English
  about: About
  twitter: Twitter
  github: GitHub
button:
  image: es
  url: /
  alt: Español
langs:
  en: English
  es: Español
pages:
  example: example
  includeexample: The following text is a Jekyll include liquid tag parameter
titles:
  pagination: Pagination
  home: "Home"

content:
  developer: Backend and AI Developer.
  master: Student of Master's Degree in Computer Engineering.
  spain: Spain
  about-me: About me
  about-me-info: |
    <p>
      I enjoy programming to the fullest, I love facing new challenges and overcoming them.
      This can be seen in the various projects I've done on my own, as well as in the
      programming competitions I've participated in: <b>Tuenti Challenge 2015 and 2016</b> or
      <b>Ada Byron 2015</b>.
    </p>
    <p>
      On the other hand, the branch that I like most of Computer Engineering is and has
      been the <b>Artificial Intelligence</b> within which I have been most excited after trying
      different techniques has been: <b>Evolutionary Programming</b> (with honors in this subject)
      and <b>Neural Networks</b>.
    </p>
    <p>
      Speaking of other subjects, I love doing sports, magic tricks, meeting people and
      facing new mental challenges (for example, the rubik cube or pages like
      <a href="https://www.codewars.com" target="_blank">CodeWars</a>).
    </p>
  languages: Languages
  experience: Experience
  education: Education
  main-projects: Main Projects
  view-report: View report
  view-project: View project
  visit-github: Visit GitHub
  others: Others
  #months: ['Jan.','Feb.','Mar.','Apr.','May','June','July','Aug.','Sept.','Oct.','Nov.','Dec.']
  months:
    january: Jan.
    frebruary: Feb.
    march: Mar.
    april: Apr.
    may: May
    june: June
    july: July
    august: Aug.
    september: Sept.
    october: Oct.
    november: Nov.
    december: Dec.
  present: present
  used-technologies: Used technologies
  all-experiences:
    softpoint: |
      Python programmer (mainly) focused in the Artificial Intelligence area
      (using among others, neural networks for image recognition in real time).
      Development of secure API's with Flask.<br>
      With staff in charge.<br>
    tfg: |
      Development of an answer search system adaptable to different domains,
      using natural language processing techniques and participating in the
      annual Bioasq Challenge programming contest.
    monitor: |
      Leisure and free time monitor at GADER Training and events. Urban summer camp.
  all-educations:
    master:
      title: Master in Computer Engineering
      description: |
        Master's degree in Computer Engineering at the Universidad Complutense
        de Madrid (average grade for the first year of 8.59/10 and with honors
        in one subject).
    grade:
      title: Grade in Computer Science
      description: |
        University degree in Computer Science at the Universidad Complutense de
        Madrid (average grade of 7.08/10 and with honors in trhee subjects).
    monitor:
      title: Monitor Title
      description: Official title of monitor of leisure and free time. Escuela Rastros, Madrid.
    bachelor:
      title: Bachelor
  all-projects:
    tfg:
      title: Answer search system
      description: |
        <p>
          This is one of the most ambitious and complete projects. It has been developed
          by four members (including myself) and two project managers (one assistant).
          It was developed as end-of-degree work and qualified with <b>10/10</b>.
        </p>
        <p>
          It consists of a system capable of consulting different API's (such as
          <a href="http://bioasq.org/" target="_blank">BioASQ</a> or
          <a href="https://simple.wikipedia.org/wiki/Main_Page" target="_blank">Simple Wikipedia</a>).
          Therefore, it is done in a generic way, so it is not necessary to make a big change if you want to
          use a new source of knowledge, this way we got a system adaptable to different domains.
        </p>
        <p>
          To achieve this we used natural language processing libraries (initially NLTK but
          finally and after a long study we opted for Spacy) and concept extraction libraries
          (in this case the <a href="https://github.com/agarsev/grafeno" target="_blank">Grafeno</a>
          library, currently under development and on which we made modifications).
        </p>
        <p>
          The process (in a simplified way) of the system consists of:
          <ol>
            <li><b>Query analysis</b>: With Spacy.</li>
            <li><b>Obtaining Textual Information</b>: With Grafeno, to generate a graph.</li>
            <li><b>Getting the Answer</b>: Comparing this graph with the knowledge of
            the system through self-generated queries in Neo4J.</li>
            <li><b>Textual generation of the answer</b>: With a Grapheno module modified by us
            that performs the graph linearization process.</li>
          </ol>
        </p>
    cv2:
      description: |
        <p>
          One of the biggest and most complex projects I've ever worked on, It's developed
          entirely by myself. The aim of this library is to help in the treatment and
          processing of images in real time in Python (based on the OpenCV library).
        </p>
        <p>
          After more than <b>6 months of development and 9 releases</b>.
          At last we have a version that meets the minimum standards for a production environment.
        </p>
        <p>
          There are currently <b> at least 2 companies that use it </b> as part of their projects.
        </p>
        <p>
          On the one hand, it is easier to use than <b>OpenCV</b> and on the other hand,
          it has a better performance obtaining frames from videos and streamings(<b> 52% faster</b>).
        </p>
        <p>
          It is also capable of painting and labeling selected objects, as well as
          tracking them. In addition it can detect scene changes (for example, detecting
          when a change of camera occurs on television).
        </p>
        <p>
          In addition it offers some other functionalities, such as, detect events of keyboard,
          to save in compressed files the edition of the video (without losing the original file),
          preprocess the answer, etc.
        </p>
    game-2048:
      description: |
        <p>
          This project is, on the one hand, a complete implementation of the famous mobile
          game <a href="https://play2048.co/" target="_blank">2048</a> in the form of a desktop application
          (based on an OpenSource project created by <a href="https://github.com/yangshun/2048-python">yangshun</a>)
          and on the other hand an Artificial Intelligence capable of playing the game.
        </p>
        <p>
          A multilayered neural network has been used for the implementation of this AI.
          It has been trained with a set of data generated from previous games with different heuristics.
          Such as: <code>random</code> (plays games with totally random movements), <code>corner</code>
          (keeping the tile of more value always in a corner, although with some noise), <code>one_corner</code>
          (same as the previous one but always staying in the same corner) and <code>explorer</code>.
        </p>
        <p>
          The heuristic <code>explorer</code> is the one that has given the best results.
          It generates decision trees looking at the next "N" plays and staying with the
          choice that leads to the best solution (the one in which it has not lost and
          has achieved a higher score).
        </p>
        <p>
          For the future I plan to improve <code>explorer</code> (to make it prune more
          of "not very promising" paths) and create a training heuristic based on
          evolutionary algorithms. However, the AI is already able to pass the game
          on many occasions (get at least one tile of value 2048).
        </p>
    animadicer:
      description: |
        <p>
          The goal of this project was to make a desktop application that speeds up
          calculations of the role-playing game
          <a href="http://www.edgeent.com/libros/coleccion/anima_beyond_fantasy" target="_blank">Anima Beyond Fantasy</a>
          (Dungeons and Dragons style interpretation board game with dice).
        </p>
        <p>
          This project includes an Excel document with all the pre-calculations to
          create a character following the rules of the game (with more than 2000
          dependencies and more than 20000 data organized in tables and introduced by hand).
        </p>
        <p>
          The project is able to load this document, extract the relevant information
          to be able to play and generate a json document with compressed information
          as well as all the functionalities to make the calculations according to
          the previously loaded character form.
        </p>
        <p>
          It includes features such as auto-updating versions (when a new version is
          uploaded to GitHub) or managing multiple characters simultaneously.
        </p>
        <p>
          Currently and by popular request I'm developing the web version completely
          responsive and with extra functionalities.
        </p>
    others:
      title: Others
      description: |
        <p>
          The main projects are those mentioned above, however I find it
          interesting to mention above the other projects I have worked
          on on my own.
        </p>
      smart-assistant: |
        <a href="https://github.com/fernaper/smart-assistant" target="_blank">Smart-Assistant</a> (developing):
        Artificial intelligence capable of recognizing and adding new voice
        commands and performing tasks typical of a virtual assistant.
      rubik-control: |
        <a href="https://github.com/fernaper/RubikControl" target="_blank">RubikControl</a>:
        Professional system to measure times and generate resolution statistics
        for the different versions of the Rubik cube (in Java).
      code-wars: |
        <a href="https://github.com/fernaper/CodeWars" target="_blank">CodeWars</a>:
        Project with all the solutions I have done for the problems of
        the page with the same name (mainly in Python and Java).
      goat-queen: |
        <a href="https://github.com/fernaper/GoatQueen" target="_blank">GoatQueen</a>
        (for now private repository): 3D board game in process of development in
        Unity with C#.
      splay-tree: |
        <a href="https://github.com/fernaper/SplayTree" target="_blank">SplayTree</a>:
        Self-adjusting binary search tree developed in C++.
      world-generator: |
        <a href="https://github.com/fernaper/WorldGenerator" target="_blank">WorldGenerator</a>:
        Generator of random worlds and labyrinths following its own efficient algorithm.
        Developed in C++ and making use of the SFML library.
  all-technologies:
    nlp: Natural Language Processing
    constraint: Constraing Programming
    evolutive: Evolutive Programming
    library: Library development
    vision: Artificial vision
