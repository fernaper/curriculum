global:
  tagline: Español
  about: Sobre
  twitter: Twitter
  github: GitHub
button:
  image: uk
  url: /en
  alt: English
langs:
  en: English
  es: Español
pages:
  example: Ejemplo
  includeexample: El siguiente texto es un parámetro de Jekyll include liquid tag
titles:
  pagination: Paginación
  home: Casa
content:
  developer: Desarrollador Backend e Inteligencia Artificial.
  master: Estudiante de Master Universitario en Ingeniería Informática.
  spain: España
  about-me: Sobre mi
  about-me-info: |
    <p>
      Disfruto al máximo de la programación, me encanta enfrentarme a nuevos
      retos y superarlos. Esto se puede ver tanto en los varios proyectos
      que he realizado por mi cuenta, como en los concursos de programación
      en los que he participado: <b>Tuenti Challenge 2015 y 2016</b> o <b>Ada Byron
      2015</b>.
    </p>
    <p>
      Por otro lado, la rama que más me gusta de Ingeniería Informática es
      y ha sido la <b>Inteligencia Artificial</b> dentro de la cual lo que más
      me ha entusiasmado tras probar diferentes técnicas ha sido: <b>Programación
      Evolutiva</b> (de hecho, habiendo obtenido matrícula en dicha asignatura) y
      <b>Redes Neuronales</b>.
    </p>
    <p>
      Hablando de otros temas, me encanta hacer deporte, trucos de magia, conocer gente y
      enfrentarme a nuevos retos mentales (por ejemplo, el cubo de rubik o
      páginas como <a href="https://www.codewars.com" target="_blank">CodeWars</a>).
    </p>
  languages: Lenguajes
  experience: Experiencia
  education: Educación
  main-projects: Proyectos Principales
  view-report: Ver memoria
  view-project: Ver proyecto
  visit-github: Visitar GitHub
  #months: ['Ene.','Feb.','Mar.','Abr.','May','Jun','Jul','Ago.','Sep.','Oct.','Nov.','Dic.']
  months:
    january: Ene.
    frebruary: Feb.
    march: Mar.
    april: Abr.
    may: May
    june: Jun
    july: Jul
    august: Ago.
    september: Sep.
    october: Oct.
    november: Nov.
    december: Dic.
  present: actualidad
  used-technologies: Tecnologías usadas
  all-experiences:
    softpoint: |
      Programador Python (principalmente) centrado en el área de Inteligencia
      Artificial (utilizando entre otras, redes neuronales para
      reconocimiento de imágenes en tiempo real).<br>
      Desarrollo de API's seguras con Flask.<br>
      Con personal acargo.
    tfg: |
      Desarrollo de un Sistema de búsqueda de respuestas adaptable a distintos dominios,
      usando técnicas de procesamiento de lenguaje natural y
      participando en el concurso de programación anual de Bioasq Challenge.
    monitor: |
      Monitor de ocio y tiempo libre en GADER Formación y eventos. Campamento urbano de verano.
  all-educations:
    master:
      title: Máster Informática
      description: |
        Máster universitario en Ingeniería Informática en la Universidad
        Complutense de Madrid (nota media del primer año de 8.59/10 y 1
        Matrícula de honor).
    grade:
      title: Grado Informática
      description: |
        Grado universitario en Ingeniería Informática en la Universidad
        Complutense de madrid (nota media de 7,08/10 y 3 Matrículas de
        honor).
    monitor:
      title: Título Monitor
      description: Título oficial de monitor de ocio y tiempo libre. Escuela Rastros, Madrid.
    bachelor:
      title: Bachillerato
    all-projects:
      tfg:
        title: Sistema de búsqueda de respuestas
        description: |
          <p>
            Este es uno de los proyectos más ambiciosos y completos. Ha sido desarrollado por cuatro miembros (entre los que me encuentro) y dos directores
            de proyecto (uno ayudante). Fue desarrollado como trabajo de fin de grado y calificado con <b>10/10</b>.
          </p>
          <p>
            Consiste en un sistema capaz de consultar diferentes API's (como la de <a href="http://bioasq.org/" target="_blank">BioASQ</a> o <a href="https://simple.wikipedia.org/wiki/Main_Page" target="_blank">Simple Wikipedia</a>).
            Por tanto, esta realizado de una forma genérica, de modo que no es necesario hacer un gran cambio si
            se quiere utilizar una nueva fuente de conocimineto, de esta forma obtuvimos un sistema adaptable a
            distintos dominios.
          </p>
          <p>
            Para conseguirlo se hizo uso de librerías de procesamiento de lenguaje natural (inicialmente NLTK pero finalmente
            y tras un largo estudio se optó por Spacy) y librerías de extracción de conceptos (en este caso la
            librería <a href="https://github.com/agarsev/grafeno" target="_blank">Grafeno</a>, actualmente en desarrollo y sobre la
            que se hicieron multiples mejoras).
          </p>
          <p>
            El proceso (de modo simplificado) del sistema consiste en:
            <ol>
              <li><b>Ánalisis de la consulta introducida</b>: Con Spacy.</li>
              <li><b>Obtención de Información Textual</b>: Con Grafeno, para obtener un grafo.</li>
              <li><b>Obtención de la Respuesta</b>: Comparando dicho grafo con el conocimiento del
              sistema a través de consultas autogeneradas en Neo4J.</li>
              <li><b>Generación textual de la respuesta</b>: Con un módulo de Grafeno modificado por nosotros que realiza el proceso de linearización de grafos.</li>
            </ol>
          </p>
  all-projects:
    tfg:
      title: Sistema de búsqueda de respuestas
      description: |
        <p>
          Este es uno de los proyectos más ambiciosos y completos. Ha sido desarrollado por cuatro miembros (entre los que me encuentro) y dos directores
          de proyecto (uno ayudante). Fue desarrollado como trabajo de fin de grado y calificado con <b>10/10</b>.
        </p>
        <p>
          Consiste en un sistema capaz de consultar diferentes API's (como la de <a href="http://bioasq.org/" target="_blank">BioASQ</a> o <a href="https://simple.wikipedia.org/wiki/Main_Page" target="_blank">Simple Wikipedia</a>).
          Por tanto, esta realizado de una forma genérica, de modo que no es necesario hacer un gran cambio si
          se quiere utilizar una nueva fuente de conocimineto, de esta forma obtuvimos un sistema adaptable a
          distintos dominios.
        </p>
        <p>
          Para conseguirlo se hizo uso de librerías de procesamiento de lenguaje natural (inicialmente NLTK pero finalmente
          y tras un largo estudio se optó por Spacy) y librerías de extracción de conceptos (en este caso la
          librería <a href="https://github.com/agarsev/grafeno" target="_blank">Grafeno</a>, actualmente en desarrollo y sobre la
          que se hicieron multiples mejoras).
        </p>
        <p>
          El proceso (de modo simplificado) del sistema consiste en:
          <ol>
            <li><b>Ánalisis de la consulta introducida</b>: Con Spacy.</li>
            <li><b>Obtención de Información Textual</b>: Con Grafeno, para obtener un grafo.</li>
            <li><b>Obtención de la Respuesta</b>: Comparando dicho grafo con el conocimiento del
            sistema a través de consultas autogeneradas en Neo4J.</li>
            <li><b>Generación textual de la respuesta</b>: Con un módulo de Grafeno modificado por nosotros que realiza el proceso de linearización de grafos.</li>
          </ol>
        </p>
    cv2:
      description: |
        <p>
          Uno de los mayores y más complejos proyectos en los que he trabajado,
          desarrollado íntegramente por mi.
          El objetivo de esta librería es ayudar en el tratamiento y procesado de
          imágines en tiempo real en Python (basado en la librería OpenCV).
        </p>
        <p>
          Después de más de <b>6 meses de desarrollo y 9 releases</b>. Al fin tenemos
          una versión que cumple con los estándares mínimos para un entorno de
          producción.
        </p>
        <p>
          Actualmente existen <b>al menos 2 empresas que la utilizan</b> como parte
          de sus proyectos.
        </p>
        <p>
          Por un lado ofrece mayor facilidad de uso que <b>OpenCV</b> y por el otro,
          mayor rendimiento en la obtención de fotogramas de videos y streamings,
          siendo hasta <b>un 52% más rápido</b>.
        </p>
        <p>
          También es capaz de pintar y etiquetar objetos seleccionados, así como,
          trackearlos y detectar cambios de escena (por ejemplo, detectar cuando
          hay un cambio de cámara en televisión).
        </p>
        <p>
          Además ofrece algunas otras funcionalidades, tales como, detectar eventos
          de teclado, guardar en ficheros comprimidos la edición (sin perder el
          archivo original), preprocesar la respuesta, etc.
        </p>
    game-2048:
      description: |
        <p>
          Este proyecto es, por un lado, una implementación completa del famoso juego de móvil
          <a href="https://play2048.co/" target="_blank">2048</a> en forma de aplicación de escritorio
          (básado en un proyecto OpenSource creado por <a href="https://github.com/yangshun/2048-python">yangshun</a>)
          y por otro lado una Inteligencia Artificial capaz de jugar dicho juego.
        </p>
        <p>
          Para la implementación de dicha IA se ha utilizado una red neuronal multicapa entrenada
          por medio de un conjunto de datos generados de partidas previas utilizando diferentes
          heurísticas. Tales como: <code>random</code> (juega partidas con movimientos totalmente aleatorios),
          <code>corner</code> (trata de que la ficha de más valor este siempre en una esquina, aunque con cierto ruido),
          <code>one_corner</code> (igual que el anterior pero manteniendose siempre en la misma esquina) y <code>explorer</code>.
        </p>
        <p>
          La heurística <code>explorer</code> es la que mejor resultados ha dado. Genera árboles de decisión mirando
          las "N" próximas jugadas y quedándose con la elección que le lleva a la mejor solución (aquella en
          la que no haya perdido y haya alcanzado una mayor puntuación).
        </p>
        <p>
          Para el futuro planeo mejorar <code>explorer</code> (para hacer que realice más podas de caminos "poco prometedores") y
          crear una heurística de entrenamiento basada en algoritmos evolutivos. No obstante, la IA ya es capaz de pasarse el
          juego en muchas ocasiones (obtener al menos una ficha de valor 2048).
        </p>
    animadicer:
      description: |
        <p>
          El objetivo de este proyecto era hacer más rápido los cálculos del juego de rol
          <a href="http://www.edgeent.com/libros/coleccion/anima_beyond_fantasy" target="_blank">Anima Beyond Fantasy</a>
          (juego de mesa de interpretación con dados, estilo Dungeons and Dragons) por
          medio de una aplicación de escritorio.
        </p>
        <p>
          Este proyecto incluye un documento Excel con todos los precalculos para
          crear un personaje siguiendo las reglas del juego (con más de 2000 dependencias
          y más de 20000 datos organizados en tablas e introducidos a mano).
        </p>
        <p>
          El proyecto es capaz de cargar dicho documento, extraer la información relevante
          para poder jugar y generar un documento json con información comprimida así como
          todas las funcionalidades para realizar los cálculos acorde
          a la ficha de personaje previamente cargada.
        </p>
        <p>
          Incluye funcionalidades como auto-actualizar versiones (cuando se sube una
          nueva versión en GitHub) o gestión de carga de multiples personajes simultáneamente.
        </p>
        <p>
          Actualmente y por petición popular me encuentro desarrollando en equipo la
          versión web completamente responsive y con funcionalidades extra.
        </p>
    others:
      title: Otros
      description: |
        <p>
          Los proyectos principales son los mencionados arriba, no obstante considero interesante,
          mencionar por encima los otros proyectos en los que he trabajado por mi cuenta y con
          los que tanto he aprendido.
        </p>
      smart-assistant: |
        <a href="https://github.com/fernaper/smart-assistant" target="_blank">Smart-Assistant</a> (en desarrollo):
        Inteligencia artificial capaz de reconocer y añadir nuevos comandos de voz y
        realizar tareas típicas de un asistente virtual.
      rubik-control: |
        <a href="https://github.com/fernaper/RubikControl" target="_blank">RubikControl</a>:
          Sistema profesional para medir los tiempos y generar estadísticas de resolución
          de las diferentes versiones del cubo de Rubik (en Java).
      code-wars: |
        <a href="https://github.com/fernaper/CodeWars" target="_blank">CodeWars</a>:
        Proyecto con todas las soluciones que he realizado para los problemas
        de la página con el mismo nombre (en Python y Java principalmente).
      goat-queen: |
        <a href="https://github.com/fernaper/GoatQueen" target="_blank">GoatQueen</a>
        (por ahora repositorio privado): Juego tablero 3D en proceso de desarrollo
        en Unity con C#.
      splay-tree: |
        <a href="https://github.com/fernaper/SplayTree" target="_blank">SplayTree</a>:
        Árbol binario de busqueda autoajustable desarrollado en C++.
      world-generator: |
        <a href="https://github.com/fernaper/WorldGenerator" target="_blank">WorldGenerator</a>:
        Generador de mundos y laberintos aleatorios siguiendo un algoritmo
        eficiente enteramente propio. Desarrollado en C++ y haciendo uso de la
        librería SFML.
  all-technologies:
    nlp: Procesamiento de lenguaje natural
    constraint: Programación con restricciones
    evolutive: Programación Evolutiva
    library: Desarrollo de librerias
    vision: Visión artificial
